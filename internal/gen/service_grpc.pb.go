// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.2
// source: service.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileUploaderClient is the client API for FileUploader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileUploaderClient interface {
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (FileUploader_UploadFileClient, error)
}

type fileUploaderClient struct {
	cc grpc.ClientConnInterface
}

func NewFileUploaderClient(cc grpc.ClientConnInterface) FileUploaderClient {
	return &fileUploaderClient{cc}
}

func (c *fileUploaderClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (FileUploader_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileUploader_ServiceDesc.Streams[0], "/FileUploader/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileUploaderUploadFileClient{stream}
	return x, nil
}

type FileUploader_UploadFileClient interface {
	Send(*FileChunk) error
	CloseAndRecv() (*FileChunkResponse, error)
	grpc.ClientStream
}

type fileUploaderUploadFileClient struct {
	grpc.ClientStream
}

func (x *fileUploaderUploadFileClient) Send(m *FileChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileUploaderUploadFileClient) CloseAndRecv() (*FileChunkResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FileChunkResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileUploaderServer is the server API for FileUploader service.
// All implementations must embed UnimplementedFileUploaderServer
// for forward compatibility
type FileUploaderServer interface {
	UploadFile(FileUploader_UploadFileServer) error
	mustEmbedUnimplementedFileUploaderServer()
}

// UnimplementedFileUploaderServer must be embedded to have forward compatible implementations.
type UnimplementedFileUploaderServer struct {
}

func (UnimplementedFileUploaderServer) UploadFile(FileUploader_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedFileUploaderServer) mustEmbedUnimplementedFileUploaderServer() {}

// UnsafeFileUploaderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileUploaderServer will
// result in compilation errors.
type UnsafeFileUploaderServer interface {
	mustEmbedUnimplementedFileUploaderServer()
}

func RegisterFileUploaderServer(s grpc.ServiceRegistrar, srv FileUploaderServer) {
	s.RegisterService(&FileUploader_ServiceDesc, srv)
}

func _FileUploader_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileUploaderServer).UploadFile(&fileUploaderUploadFileServer{stream})
}

type FileUploader_UploadFileServer interface {
	SendAndClose(*FileChunkResponse) error
	Recv() (*FileChunk, error)
	grpc.ServerStream
}

type fileUploaderUploadFileServer struct {
	grpc.ServerStream
}

func (x *fileUploaderUploadFileServer) SendAndClose(m *FileChunkResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileUploaderUploadFileServer) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileUploader_ServiceDesc is the grpc.ServiceDesc for FileUploader service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileUploader_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FileUploader",
	HandlerType: (*FileUploaderServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _FileUploader_UploadFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
